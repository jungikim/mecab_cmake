# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, macos-latest]
             # , windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          # - os: windows-latest
          #   c_compiler: cl
          #   cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          # - os: windows-latest
          #   c_compiler: gcc
          # - os: windows-latest
          #   c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "install-output-dir=${{ github.workspace }}/install" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_INSTALL_PREFIX=${{ steps.strings.outputs.install-output-dir }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target install

    # - name: Test
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest --build-config ${{ matrix.build_type }}


  build-on-cibuildwheel:
    name: Build on ${{ matrix.os }} for ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-11, windows-2019]
        arch: [auto64]
        include:
        - os: ubuntu-20.04
          arch: aarch64
        - os: macos-11
          arch: arm64

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: docker/setup-qemu-action@v2
        if: ${{ matrix.arch == 'aarch64' }}
        name: Set up QEMU

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.2
        with:
          package-dir: tools
          output-dir: wheelhouse
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
          CIBW_ENVIRONMENT_LINUX: INSTALL_ROOT='${{ github.workspace }}/install'
          CIBW_ENVIRONMENT_MACOS: INSTALL_ROOT='${{ github.workspace }}/install'
          CIBW_ENVIRONMENT_WINDOWS: INSTALL_ROOT='${{ github.workspace }}\install'
          CIBW_BEFORE_ALL: tools/prepare_build_environment.sh
          CIBW_BEFORE_ALL_WINDOWS: bash tools/prepare_build_environment_windows.sh
          CIBW_BEFORE_BUILD: pip install pybind11==2.10.1
          # CIBW_TEST_COMMAND: pytest {project}/bindings/python/test/test.py
          # CIBW_TEST_REQUIRES: pytest
          CIBW_SKIP: pp* *-musllinux_*
          CIBW_TEST_SKIP: "*-macosx_arm64"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: LD_LIBRARY_PATH=${INSTALL_ROOT}/lib:${INSTALL_ROOT}/lib64:${LD_LIBRARY_PATH} auditwheel repair -w {dest_dir} {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: DYLD_LIBRARY_PATH=${INSTALL_ROOT}/lib:${INSTALL_ROOT}/lib64:${DYLD_LIBRARY_PATH} delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}

      # - name: Upload Python wheels
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: python-wheels
      #     path: wheelhouse
